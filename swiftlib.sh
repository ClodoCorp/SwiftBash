#!/bin/bash
################################
# Swift Bash Functions Library #
################################
SBFL_VERSION="0.0.4"

#
# Do not edit this file. Just source it into your script
# and override the variables to change their value.
#

################################################################################
# TODO:
# - Reauth cycle with wrong token may never end
# - 409 / Conflict
# * Meta-data operations should be implemented
# * Move auth check to common function
# * Add 500 errors processing
#
################################################################################

################################################################################
# Private functions. Don't call them from outside
################################################################################
AUTH_URL_CLODO="http://api.clodo.ru/v1"

LIST_LIMIT=10000
MAX_FILESIZE=4294967296 # 4Gb Max allowed object size
PREF_SSIZE=104857600 # 100Mb Preffered segment size

DEBUG=no # Be verbose or no.

init() {
    AUTH_URL="$AUTH_URL_CLODO"
}

error() {
    ERR="$@"
    printf 'ERROR:%s\n' "$@" >&2
}

debug() {
    if [[ "$DEBUG" != "no" ]]; then
        printf 'DEBUG:%s\n' "$@" >&2
    fi
}

################################################################################
# Public Functions
#
# return codes:
# 0 - ok
# 1 - internal problem
# 2 - not found
# 3 - wrong argument
# 4 - external problems
#
################################################################################

#
# Authenticates in $AUTH_URL and updates API_URL ans API_TOKEN
# Args: Storage user 
#       Storage key
#
authenticate() {
    STORAGE_USER=$1
    STORAGE_KEY=$2

    debug "Auth with u: $STORAGE_USER k: $STORAGE_KEY"
    AUTH_DAT="$(curl -I -s -H "X-Auth-User: $STORAGE_USER" -H "X-Auth-Key: $STORAGE_KEY" $AUTH_URL 2>&1)"
    debug "Auth response: \"$AUTH_DAT\""
    
    if [ -z "$AUTH_DAT" ]; then
        error "Can't find Cloud Storage server"
        return 2
    fi

    ERR=`echo "$AUTH_DAT" | grep 'Unauthorized'`
    if [ $? -eq 0 ]; then
        error "Unauthorized!"
        return 4
    fi

    API_URL=`echo "$AUTH_DAT" | grep 'X-Storage-Url'|sed 's/X-Storage-Url: \(.*\)\r/\1/'`
    if [ -z "$API_URL" ]; then
        error"Error getting API URL"
        return 4
    fi

    API_TOKEN=`echo "$AUTH_DAT" | grep 'X-Storage-Token' | sed 's/X-Storage-Token: \(.*\)\r/\1/'`
    if [ -z "$API_TOKEN" ]; then
        error "Error getting API TOKEN"
        return 4
    fi
    return 0
}

#
# Get Account storage usage
#
get_acct_bytes_used() {
    curl -I -s -X HEAD -H "X-Auth-Token: $API_TOKEN" $API_URL |  grep -o -E "X-Account-Bytes-Used: [0-9]+" | cut -f2 -d" "
    return $?
}

#
# Get Acccount container count
#
get_acct_cont_count() {
    curl -I -s -X HEAD -H "X-Auth-Token: $API_TOKEN" $API_URL |  grep -o -E "X-Account-Container-Count: [0-9]+" | cut -f2 -d" "
    return $?
}

#
# Get Account MetaData 
#
get_acct_meta() {
    curl -I -s -X HEAD -H "X-Auth-Token: $API_TOKEN" $API_URL |  grep "X-"
    return $?
}

#
# List account containers
# Args: Output format // json|xml 
#
get_cont_list() {
    local suffix=""
    if [[ "$1" == "json" || "$1" == "xml" ]]; then
        suffix="?format=$1"
    fi
    curl -s -X GET -H "X-Auth-Token: $API_TOKEN" ${API_URL}${suffix}
    return $?
}

#
# Get Container MetaData 
# Args: Container
#
get_cont_meta() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 3
    fi
   
    curl -I -s -X HEAD -H "X-Auth-Token: $API_TOKEN" "$API_URL/$cont" |  grep "X-"
    return $?
}

#
# Get container's object count
# Args: Container
#
get_obj_count() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 3
    fi

    get_cont_meta "$cont" | grep -o -E "X-Container-Object-Count: [0-9]+" | cut -f2 -d" "
}

#
# List container objects
# Args: Container
#       Output format // json|xml 
#
get_obj_list() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 3
    fi
    
    local suffix=""
    if [[ "$2" == "json" || "$2" == "xml" ]]; then
        suffix="?format=$2"
    fi

    curl -s -X GET -H "X-Auth-Token: $API_TOKEN" "${API_URL}/$cont${suffix}"
    return $?
}

#
# List all container's objects and output to file
# Args: Container
#       Output file (optional)
#
get_obj_list_long() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 3
    fi
    
    local file="$2"

    if [[ -n "$file" && -f "$file" ]]; then
        echo -ne "" > "$file"
    fi

    local limit=$LIST_LIMIT
    local marker=""
    local TLIST=""

    while [ "$limit" -gt 0 ]
    do
        local list=`curl -s -X GET -H "X-Auth-Token: $API_TOKEN" ${API_URL}/"$cont"\?limit=${limit}\&marker=${marker}`
        local lcnt=`echo "$list" | wc -l`
        marker=`echo "$list" | tail -n1`
        if [ "$lcnt" -lt "$limit" ]; then
            limit=0
        fi
        if [ -n "$file" ]; then
            echo -ne "$list" >> "$file"
        else
            TLIST="$TLIST
$list"
        fi
    done
    
    if [ -z "$file" ]; then
        echo "$TLIST" | sed '1d'
    fi
}

#
# Create container
# Args: Container
#
create_cont() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 2
    fi
    RESP=$(curl -# -v -X PUT -D - -H "Content-Length: 0" -H "X-Auth-Token: $API_TOKEN" "${API_URL}/$cont" 2>&1)
    debug "$RESP"

    if echo "$RESP" | grep -E "< HTTP/1.. 204|< HTTP/1.. 201|< HTTP/1.. 202" > /dev/null ; then
        return 0
    elif echo "$RESP" | grep -E "< HTTP/1.. 401" > /dev/null ; then
        authenticate $STORAGE_USER $STORAGE_KEY
        create_cont "$cont"
        return $?
    elif echo "$RESP" | grep -E "< HTTP/1.. 404" > /dev/null ; then
        error "Object not found!"
        return 2
    else
        return 1
    fi
}

#
# Delete containe
# Args: Container
#
delete_cont() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return
    fi
    RESP=$(curl -# -v -I -X DELETE -D - -H "X-Auth-Token: $API_TOKEN" "${API_URL}/$cont" 2>&1)
    debug "$RESP"

    if echo "$RESP" | grep -E "< HTTP/1.. 204|< HTTP/1.. 201|< HTTP/1.. 202" > /dev/null ; then
        return 0
    elif echo "$RESP" | grep -E "< HTTP/1.. 401" > /dev/null ; then
        authenticate $STORAGE_USER $STORAGE_KEY
        delete_cont "$cont"
        return $?
    elif echo "$RESP" | grep -E "< HTTP/1.. 404" > /dev/null ; then
        error "Object not found!"
        return 2
    else
        return 1
    fi
}

#
# Create or update object
# Args: Container
#       Object name
#       Input file
#
put_obj() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 3
    fi
    
    local obj="$2"
    if [ -z "$obj" ]; then
        error "Object name is empty!"
        return 3
    fi

    local file="$3"
    if [ -z "$file" ]; then
        error "File name is empty!"
        return 3
    fi

    if [ ! -f "$file" ]; then
        error "Source file does not exists!"
        return 3
    fi
    
    RESP=$(curl -# -I -v -X PUT -T "$file" -H "X-Storage-Token: $API_TOKEN" "${API_URL}/${cont}/${obj}" 2>&1) 
    debug "$RESP"

    if echo "$RESP" | grep -E "< HTTP/1.. 204|< HTTP/1.. 201|< HTTP/1.. 202" > /dev/null ; then
        return 0
    elif echo "$RESP" | grep -E "< HTTP/1.. 401" > /dev/null ; then
        authenticate $STORAGE_USER $STORAGE_KEY
        put_obj "$cont" "$obj" "$file"
        return $?
    elif echo "$RESP" | grep -E "< HTTP/1.. 404" > /dev/null ; then
        error "Object not found!"
        return 2
    else
        return 1
    fi
}

#
# Create or update object's Manifest
# Args: Container
#       Object name
#       PIN
#
put_obj_manifest() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 3
    fi
    
    local obj="$2"
    if [ -z "$obj" ]; then
        error "Object name is empty!"
        return 3
    fi

    local pin="$3"
    if [ -z "$pin" ]; then
        error "No PIN specified!"
        return 3
    fi

    RESP=$(curl -# -I -v -X PUT -H "Content-Length: 0" \
        -H "X-Object-Meta-PIN: $pin" \
        -H "X-Object-Manifest: $cont/$obj" \
        -H "X-Storage-Token: $API_TOKEN" "${API_URL}/${cont}/${obj}" 2>&1) 
    debug "$RESP"

    if echo "$RESP" | grep -E "< HTTP/1.. 204|< HTTP/1.. 201|< HTTP/1.. 202" > /dev/null ; then
        return 0
    elif echo "$RESP" | grep -E "< HTTP/1.. 401" > /dev/null ; then
        authenticate $STORAGE_USER $STORAGE_KEY
        put_obj_manifest "$cont" "$obj" "$pin"
        return $?
    elif echo "$RESP" | grep -E "< HTTP/1.. 404" > /dev/null ; then
        error "Object not found!"
        return 2
    else
        return 1
    fi
}


#
# Upload object's segment
# Args: Container
#       Object name
#       Input file
#       PIN
#       Start offset (bytes)
#       Segment size (bytes)
#
put_obj_segment() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 3
    fi
    
    local obj="$2"
    if [ -z "$obj" ]; then
        error "Object name is empty!"
        return 3
    fi

    local file="$3"
    if [ -z "$file" ]; then
        error "File name is empty!"
        return 3
    fi

    if [ ! -f "$file" ]; then
        error "Source file does not exists!"
        return 3
    fi

    local pin="$4"
    if [ -z "$pin" ]; then
        error "No PIN specified!"
        return 3
    fi

    local start="$5"
    if [ -z "$start" ]; then
        error "Segment start is empty!"
        return 3
    fi
    local bskip=`echo $start/512|bc`

    local ssize="$6"
    if [ -z "$ssize" ]; then
        error "Segment size is empty!"
        return 3
    fi
    local bsize=`echo $ssize/512 |bc`

    RESP=$(dd if="$file" bs=512 count=$bsize skip=$bskip 2>/dev/null | curl -# -I -v -X PUT -T "-" -H "X-Storage-Token: $API_TOKEN" -H "X-Object-Meta-PIN: $pin" "${API_URL}/${cont}/${obj}" 2>&1)

    debug "$RESP"

    if echo "$RESP" | grep -E "< HTTP/1.. 204|< HTTP/1.. 201|< HTTP/1.. 202" > /dev/null ; then
        return 0
    elif echo "$RESP" | grep -E "< HTTP/1.. 401" > /dev/null ; then
        authenticate $STORAGE_USER $STORAGE_KEY
        put_obj_segment "$cont" "$obj" "$file" "$pin" "$start" "$ssize"  
        return $?
    elif echo "$RESP" | grep -E "< HTTP/1.. 404" > /dev/null ; then
        error "Object not found!"
        return 2
    else
        return 1
    fi
}

#
# Create or update large object
# Args: Container
#       Object name
#       Input file
#       Segment size
#
put_obj_large() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 3
    fi
    
    local obj="$2"
    if [ -z "$obj" ]; then
        error "Object name is empty!"
        return 3
    fi

    local file="$3"
    if [ -z "$file" ]; then
        error "File name is empty!"
        return 3
    fi

    if [ ! -f "$file" ]; then
        error "Source file does not exists!"
        return 3
    fi
    
    local ssize="$4"
    if [ -z "$ssize" ]; then
        ssize="$PREF_SSIZE"
    fi
    
    if [ "$ssize" -gt "$MAX_FILESIZE" ]; then
        error "Segment size is bigger than max file size!"
        return 3
    fi

    if [ "`echo $ssize%512|bc`" -gt "0" ]; then
        error "Segment size must be a multiple of 512!"
        return 3
    fi
    
    local fsize=$(stat -c%s "$file")
    if [ "$fsize" -eq "0" ] ;then
        error "File size is zero!"
        return 3
    fi

    if [ "$fsize" -lt "$ssize" ]; then
        error "File size fits segment size. Using regular put."
        put_obj "$cont" "$obj" "$file"
        return $?
    fi

    local pin=`mktemp -qud -p "" -t "XXXXXX"`
    if [ -z "$pin" ]; then
        pin=`dd if=/dev/random count=1 2>/dev/null | md5sum | cut -c -6`
    fi

    local fparts=`echo "$fsize / $ssize" | bc`
    local lssize=`echo "$fsize % $ssize" | bc`
    if [ "$lssize" -eq "0" ]; then
        fparts=$(($fparts-1))
    fi

    for sgmt in `seq -f %04g 0 $fparts`; do
        put_obj_segment "$cont" "${obj}_${sgmt}" "$file" "$pin" "`echo $sgmt\*$ssize|bc`" "$ssize"
    done
    
    put_obj_manifest "$cont" "$obj" "$pin"

    return 0
}


#
# Copy object
# Args: Source Object name
#       Destination Object name
#
copy_obj() {
    local src="$1"
    if [ -z "$src" ]; then
        error "Source object name is empty!"
        return 3
    fi
    
    local dest="$2"
    if [ -z "$dest" ]; then
        error "Destination object name is empty!"
        return 3
    fi

    RESP=$(curl -# -v -X PUT -H "X-Storage-Token: $API_TOKEN" 
        -H "X-Copy-From: $src" \
        -H "Content-Length: 0" \
        "${API_URL}/${dest}" 2>&1) 
    debug "$RESP"

    if echo "$RESP" | grep -E "< HTTP/1.. 204|< HTTP/1.. 201|< HTTP/1.. 202" > /dev/null ; then
        return 0
    elif echo "$RESP" | grep -E "< HTTP/1.. 401" > /dev/null ; then
        authenticate $STORAGE_USER $STORAGE_KEY
        copy_obj "$src" "$dest"
        return $?
    elif echo "$RESP" | grep -E "< HTTP/1.. 404" > /dev/null ; then
        error "Object not found!"
        return 2
    else
        return 1
    fi
}

#
# Delete object
# Args: Full Object name (container + object)
#
delete_obj() {
    local obj="$1"
    if [ -z "$obj" ]; then
        error "Object name is empty!"
        return
    fi
    RESP=$(curl -# -v -I -X DELETE -D - -H "X-Auth-Token: $API_TOKEN" "${API_URL}/$obj" 2>&1)
    debug "$RESP"

    if echo "$RESP" | grep -E "< HTTP/1.. 204|< HTTP/1.. 201|< HTTP/1.. 202" > /dev/null ; then
        return 0
    elif echo "$RESP" | grep -E "< HTTP/1.. 401" > /dev/null ; then
        authenticate $STORAGE_USER $STORAGE_KEY
        delete_obj "$obj"
        return $?
    elif echo "$RESP" | grep -E "< HTTP/1.. 404" > /dev/null ; then
        error "Object not found!"
        return 2
    else
        return 1
    fi
}

#
# Create pseudo-directory object
# Args: Container
#       Object name
#
create_dir() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 3
    fi

    local obj="$2"
    if [ -z "$obj" ]; then
        error "Object name is empty!"
        return 3
    fi
    RESP=$(curl -# -f -X PUT -v -H "X-Storage-Token: $API_TOKEN" \
        -H "Content-Type: application/directory" \
        -H "Content-Length: 0" "$API_URL/${cont}/${obj}" 2>&1)
    debug "$RESP"

    if echo "$RESP" | grep -E "< HTTP/1.. 204|< HTTP/1.. 201|< HTTP/1.. 202" > /dev/null ; then
        return 0
    elif echo "$RESP" | grep -E "< HTTP/1.. 401" > /dev/null ; then
        authenticate $STORAGE_USER $STORAGE_KEY
        create_dir "$cont" "$obj"
        return $?
    elif echo "$RESP" | grep -E "< HTTP/1.. 404" > /dev/null ; then
        error "Object not found!"
        return 2
    else
        return 1
    fi
}

#
# Check if container exists
# Args: Container
#

check_container_exists() {
    local cont="$1"
    if [ -z "$cont" ]; then
        error "Container name is empty!"
        return 3
    fi
    if ! get_cont_list | grep -e "^${cont}\$" > /dev/null ; then
        return 2
    fi
}

init

